Note pour roger sky line
———————————————————————————

A chaque ouverture, faire sudo apt-get update

———————————————————————————
Install VN 8 000 000 000 000
VDI
Partition 
	manuel
	sc3…
	Partition = 4.2
Hostname: Debian
Password root : pwdroot
User: polux : 2019

mise a jour:
su -c "apt update && apt upgrade" root
su -c "apt install sudo" root”
Su -c “sudo adduser castor sudo” root

Ajouter polux au shudders

Installer 
	net-tools
	htop
	ipreoute
	curl
pour installer systemctl pour sshd
Sudo apt install policykit-1
sudo apt-get install ufw
sudo apt install fail2ban
 
	


			su-	apt-get update
					upgrade
				apt-get install sudo
				exit
 

Tester les commanded du shell: https://explainshell.com/explain

			Su -c “apt-get upgrade” root

usermod -aG sudo USER
	modify a user account
	-a, --append
    	Add the user to the supplementary group(s). Use only with the -G option.
	-G, --groups GROUP1[,GROUP2,...[,GROUPN]]]. A list of supplementary groups which the user is also a member of. Each group is separated from the next by a comma, with no intervening whitespace. The groups are subject to the same restrictions as the group given with the -g option.

Ip de la machine : ip address: 
	ip : 10.11.200.53/16
	brd : 10.11.255.255


ajouterUtilisateurs pas dans les sudoers
su -c "sudo adduser castor" root
Redemarrrer

—————————————————————————————————————————————

ip a show enp0s3
ip a —> avant chaque session


Verifier le fichier INTERFACES
Sudo nano /etc/network/interfaces

Verifier la config
Sous le réseau de 42, car branche sur une machine fournissant une adresse automatique via  DHCP 
	allow-hotplug enp0s3
	iface eth0 inet dhcp
Une fois mon réseau créer:
	iface enp0s3 inet static
		address 10.1f.x.y —> 10.11.200.53/30
		netmask 30
		gateway 10.1f.254.254 -> 10.11.254.254
Apres les modifications 
Faire pour relancer 
	sudo reboot

———————————————————————
Pour verifier ssh installe cote serveur 
	apt-cache policy openssh-server	
Ou	ls -la /etc/ssh/sshd-config
Si actif
	systemctl status sshd

Verifier les ports de connection
	sudo netstat -tnplv | grep ssh
	ss -lntp | grep (+numero du port)
		-l : port a l’écoute seulement
		-n : port de facon numeriq
		-t : port Tcp seulemt
		-p : liste de sprocessud derive du port

sur le serveur, Faire une copie du fichier sshd_config
	sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bck
Editer le fichier ssh-config pour changer le port
	sudo vi /etc/ssh/sshd_config
	#Port 22 -> Port 1024
Redemarrer ssh
	service se trouve dans le PATH de root mais pas d'un user (/usr/sbin/service) donc sudo
	sudo service sshd restart
	systemctl restart sshd
 
	
Generer les cles
Chez client
	- ssh-keygen -t rsa(/Users/schatagn/.ssh/id_rsa)poluxkeys
	- ssh-copy-id -i ~/.ssh/id_rsa.pub -p 1024 “polux@10.11.200.53”
			-p pour changer du port 22 
			-i pour le chemin des clefs


The sshd (OpenSSH Daemon) is the daemon program for ssh. Server side ssh configuration is defined in /etc/ssh/sshd_config file on Linux operating system. The ssh is the client program for sshd daemon. You need to use DenyUsers option to block access to root user on Linux. Another option to block root user access is to set PermitRootLogin to no in sshd_config file


in /etc/ssh/sshd_config
PermitRootLogin no
DenyUsers root
PasswordAuthentication no

Pour teste si efficace : ssh root@10.11.200.xxxx

———————————————————————————


sudo apt-get install ufw
Sudo uff status
#pour lister les services: 
less /etc/services
Les ports a l’ecoute 
sudo netstat -tnplv

sudo ufw enable
!!!!!!Sudo uff status verbose
sudo ufw allow 1024/tcp
sudo ufw allow http/tcp (port 80/tcp)
sudo ufw allonow 443. Authorizer https 
sudo ufw deny 22
sudo ufw reload

—————————————————
DOS, Denis de service : Ping flooding, Attaque  Ping  of Death, SYN  flood, UDP Flood
Fail2ban: fichier de configuration global /etc/fail2ban/fail2ban.conf, non modifie
Fail2ban va régulièrement lire les logs de connexion ou d’accès de votre machine et va, en fonction de règles prédéfinies (Regex),  et d’un nombre de tentatives de connexions définies à l’avance, bannir  pour un temps donné, les IP impliquées dans votre pare-feux iptables et, si vous le souhaitez, vous envoyer un mail.
Le programme fonctionne donc en modules « prisons » appelés « jail » pour chaque service que vous souhaitez surveiller tel que ssh ou apache etc…

—> configuration de base se fait dans le fichier /etc/fail2ban/jail.local, a créer
jail.local appelle les filtres de filter.d

sudo apt install fail2ban
Sudo reboot
sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
sudo nano /etc/fail2ban/jail.local

!!!!!!!sudo systemctl restart fail2ban

sudo fail2ban-client status

bantime = Il définit en secondes combien de temps doit être bannie l’ip : 3600 = 1h
findtime = Il définit en seconde jusqu’ou dans le temps doit remonter fail2ban lors de sa lecture ou relecture des logs. 3600 = 1h
–maxretry = le nombre d’essai infructueux autorisés avant banissement

Decommenter : [sshd] et [DEFAULT]

bantime=600
findtime=600
maxretry=3

[sshd]
enabled = true
port    = 1337
???  Filter = sshd
logpath = %(sshd_log)s
backend = %(sshd_backend)s
bantime = 600
findtime = 600
maxretry = 3
Pour tester, se connecter avec un faux code depuis le client
—————————————————————————————————————————————————————
portsentry est un programme de détection et de blocage de "scan de ports" (généralement programme qui scanne votre machine à le recherche de ports ouverts, en général dans le but de préparer une attaque). 
Si vous choisissez le mode atcp et audp dans /etc/defaults/portsentry, inutile de préciser les ports; Portsentry va vérifier les ports utilisés et automatiquement "lier" les ports disponibles. C'est l'options la plus efficace ("a" signifie avancé). Avec cette options, portsentry établit une liste des ports d'écoute, TCP et UDP, et bloque l'hôte se connectant sur ​​ces ports, sauf s'il est présent dans le fichier portsentry.ignore.

sudo apt install portsentry
Sudo reboot
Dans le fichier /etc/default/portsentry, écrire 
TCP_MODE="atcp"
UDP_MODE="audp"
sudo nano /etc/portsentry/portsentry.conf
##################
# Ignore Options #
##################


BLOCK_UDP="1"
BLOCK_TCP="1"

———————————————————————————————
Lister les services en cours” enabled”
	systemctl list-unit-files --state=enabled
	systemctl list-unit-files --show-types | grep "enabled"
	systemctl list-units --type=service

polux@debian:~$ systemctl list-unit-files --show-types | grep "enabled"
apache2.service                                                o enabled —> Apache est le serveur Web le plus couramment utilisé sur les systèmes Linux
apparmor.service                                               o enabled —> logiciel libre de sécurité pour Linux
autovt@.service                                                o enabled —> lien symbolique vers getty@.service —> programme Unix qui tourne sur hôte, permet de gérer un terminal tty physique ou virtuel.
console-setup.service                                          # enabled —> ournit à la console le même modèle de configuration du clavier que celui du système X Window
cron.service                                                   o  enabled —> permet d'exécuter automatiquement des scripts, des commandes ou des logiciels à une date et une heure ou selon un cycle défini à l'avance.
dbus-org.freedesktop.timesync1.service                           enabled —> 
fail2ban.service                                               o enabled —> analyse les logs de divers services en cherchant correspondances entre des motifs définis dans ses filtres et les entrées des logs
getty@.service                                                 o enabled —> programme Unix qui tourne sur hôte, permet de gérer un terminal tty physique ou virtuel
keyboard-setup.service                                         # enabled —> definition du clavier
networking.service                                             o enabled —> is an application running at the network application layer and above
rsyslog.service                                                ? enabled —> Rsyslog is an open source program for transferring log messages over an IP network for UNIX and Unix systems
ssh.service                                                    o enabled —> Secure Shell (SSH) is a cryptographic network protocol for operating network services securely over an unsecured network
sshd.service                                                   o enabled —> sshd (démon SSH) est un démon pour ssh(1)
syslog.service                                                 # enabled —> Syslog is a way for network devices to send event messages to a logging server – usually known as a Syslog server
systemd-fsck-root.service                                      o enabled-runtime —> services responsible for file system checks
systemd-timesyncd.service                                      o enabled —>  service that may be used to synchronize the local system clock with a remote Network Time Protocol server
ufw.service                                                    o enabled —> UFW, or uncomplicated firewall, is a frontend for managing firewall rules in Arch Linux, Debian or Ubuntu
remote-fs.target                                               o enabled —> Similar to cryptsetup.target , but for encrypted devices which are accessed over the network
apt-daily-upgrade.timer                                        # enabled —> apt, from 1.2.10 onwards (ie any version in Xenial, onwards) uses a systemd timer instead of a cron.daily job
apt-daily.timer                                                # enabled —> keep the computer current with the latest security (and other) updates automatically
logrotate.timer                                                o enabled —> Logrotate allows for the automatic rotation compression, removal and mailing of log files
man-db.timer                                                   o enabled —> documentation that is available on almost all UNIX-like operating systems

sudo systemctl disable console-setup.service
sudo systemctl disable keyboard-setup.service
sudo systemctl disable apt-daily.timer
sudo systemctl disable apt-daily-upgrade.timer
sudo systemctl disable syslog.service

sudo service portsentry restart

—————————————————————
#cron

• Réalisez un script qui met à jour l’ensemble des sources de package, puis de vos packages et qui log l’ensemble dans un fichier nommé /var/log/update_script.log. 
• Créez une tache planifiée pour ce script une fois par semaine à 4h00 du matin et à chaque reboot de la machine.

cat /var/log/update_script.log pour afficher le fichier
sudo sh ./update_cron.sh pour executer le script
~/RogerGit/update_cron —> localisation du fichier




Accueil > Commandes Linux de base > Cron : gestion des tâches planifiées
Cron : gestion des tâches planifiées

    deliciousdiggfacebookseenthistechnoratitwitter

Table des matières

    Où Cron trouve-t-il les tâches à effectuer
    La syntaxe des fichiers de Cron
    Le Cron des utilisateurs
    Les notifications du Cron

Cron est un programme disponible sur les systèmes de type Unix (Linux, Mac Osx ...) permettant de planifier des taches régulières. Il est en effet intéressant que les tâches habituelles soient réalisées automatiquement par le système plutôt que d’avoir à les lancer manuellement en tant qu’utilisateur.

Cron est un démon, il tourne donc en tâche de fond du système. Il peut donc être arrêté, démarré ou redémarrer avec la commande :

    /etc/init.d/cron start|stop|restart

Copier dans le presse-papier
Où Cron trouve-t-il les tâches à effectuer Retour à la table des matières

Les tâches Cron peuvent être programmées par l’installation de logiciels ou par les utilisateurs.

Les logiciels installés nécessitant des tâches planifiées les mettent dans les répertoires suivants :

    /etc/cron.d
    /etc/cron.hourly
    /etc/cron.daily
    /etc/cron.weekly
    /etc/cron.monthly

Télécharger - Copier dans le presse-papier

Comme leur noms l’indiquent les 4 derniers répertoires définissent un intervalle de temps entre les tâches : chaque heure, chaque jour, chaque semaine, chaque mois.

Chaque fichier de ces répertoires sont des scripts (en général bash) qui seront exécutés.

Par exemple, Apache2 installe un fichier /etc/cron.daily/apache2 lançant chaque jour le nétoyage de son cache.

Les fichiers définissant les tâches Cron par utilisateur sont situés dans le répertoire /var/spool/cron. Ils ne doivent pas être modifiés directement mais via la commande crontab

“Il existe également un fichier /etc/crontab qu’il n’est pas recommandé de modifier, mais plutôt d’utiliser la méthode précédente (tâches de l’utilisateur)”.



sudo systemctl enable cron
cat /etc/crontab
crontab -l : afficher crontab
crontab -e :  modifier la crontab et le creer si n’existe pas pas 
	    @reboot root sh /home/
	    0 4 * * 0 root sh /

Pour exécuter une commande une seule fois, juste après le démarrage de l'ordinateur, on peut recourir à la macro @reboot (un simple redémarrage de cron ne déclenche pas une commande planifiée avec @reboot). Cette macro remplace elle aussi les cinq premiers champs d'une entrée dans la crontab. 

@reboot root sh /home/

******************
Pour avoir le journal de log de cron:

nano /etc/rsyslog.conf
Enlever # devant cron
sudo service rsyslog restart
sudo service cron restart
tail -f /var/log/cron.log
******************
#!/usr/bin/env bash

##
## Packages upgrade script initialisation
## To schedule the upgrade, add the following lines to /etc/crontab:
##      @reboot root sh /home/roger/package_upgrade.sh
##      0 4 * * 0 root sh /home/roger/package_upgrade.sh
##

log_file='/var/log/update_script.log'

apt-get update >> $log_file 2>&1 && apt-get upgrade -y >> $log_file 2>&1	


 /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )


!! Il est aussi important de noter que le fichier crontab de l'utilisateur système root peut être édité avec l'instruction `sudo crontab -e`
 Dans ce cas il ne faut pas préciser l'utilisateur sinon root est compris comme une instruction à exécuter et il ne se passera rien. 

verifier que cron est en fonction
ps -aux|grep cron
